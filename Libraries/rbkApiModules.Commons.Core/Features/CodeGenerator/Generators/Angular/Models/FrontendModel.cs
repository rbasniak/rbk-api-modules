using rbkApiModules.Commons.Core.Localization;
using Serilog;
using System.Reflection;
using System.Text;

namespace rbkApiModules.Commons.Core.CodeGeneration;

public class FrontendModel
{
    private readonly string _basePath;
    private readonly string _modelsPath;

    public FrontendModel(ControllerInfo[] controllers, TypeInfo[] models, string basePath, ILocalizationService localization)
    {
        _basePath = basePath;

        _modelsPath = Path.Combine(basePath, "models");

        Services = new List<TypescriptService>();
        Models = new List<TypescriptModel>();
        Stores = new List<NgxsStore>();

        foreach (var model in models)
        {
            Models.Add(new TypescriptModel(model));
        }

        foreach (var controller in controllers)
        {
            var service = new TypescriptService(controller);
            Services.Add(service);

            if (controller.Type.GetCodeGenerationIgnoreMode() == IgnoreMode.None)
            {
                Stores.Add(new NgxsStore(controller, localization));
            } 
        }
    }

    public List<TypescriptService> Services { get; set; }
    public List<TypescriptModel> Models { get; set; }
    public List<NgxsStore> Stores { get; set; }

    public void GenerateModels()
    {
        foreach (var model in Models.Where(x => x.Filepath != null))
        {
            Log.Information("Generating TypeScript model: {model}", model.Name);

            var filename = Path.Combine(_basePath, model.Filepath);
            Directory.CreateDirectory(Path.GetDirectoryName(filename));

            File.WriteAllText(filename, model.GenerateCode(Models));
        }
    }

    public void GenerateServices()
    {
        foreach (var service in Services)
        {
            Log.Information("Generating TypeScript service: {model}", service.Name);

            var filename = Path.Combine(_basePath, service.Filepath);
            Directory.CreateDirectory(Path.GetDirectoryName(filename));

            File.WriteAllText(filename, service.GenerateCode(Models));
        }
    }

    public void GenerateStores()
    {
        foreach (var store in Stores)
        {
            Log.Information("Generating NGXS store: {store}", store.Name);

            if (!store.Actions.Items.Any(x => x.Type == ActionType.LoadAll)) continue;

            var actionFilename = Path.Combine(_basePath, "state", "database", CodeGenerationUtilities.ToTypeScriptFileCase(store.Name), store.ActionsFilepath) + ".ts";
            var selectorFilename = Path.Combine(_basePath, "state", "database", CodeGenerationUtilities.ToTypeScriptFileCase(store.Name), store.SelectorFilepath) + ".ts";
            var stateFilename = Path.Combine(_basePath, "state", "database", CodeGenerationUtilities.ToTypeScriptFileCase(store.Name), store.StateFilepath) + ".ts";

            var actionData = store.GenerateActionFile();
            var selectorData = store.GenerateSelectorFile();
            var stateData = store.GenerateStateFile();

            Directory.CreateDirectory(Path.GetDirectoryName(actionFilename));
            File.WriteAllText(actionFilename, actionData);

            Directory.CreateDirectory(Path.GetDirectoryName(selectorFilename));
            File.WriteAllText(selectorFilename, selectorData);

            Directory.CreateDirectory(Path.GetDirectoryName(stateFilename));
            File.WriteAllText(stateFilename, stateData);
        }

        GenerateStoreSetupFile();
    }

    private void GenerateStoreSetupFile()
    {
        var code = new StringBuilder();

        foreach (var store in Stores)
        {
            if (!store.Actions.Items.Any(x => x.Type == ActionType.LoadAll)) continue;

            var name = CodeGenerationUtilities.ToTypeScriptFileCase(store.Name);

            code.AppendLine($"import {{ {store.Name}Actions }} from './{name}/{name}.actions';");
            code.AppendLine($"import {{ {store.Name}State, {name.ToUpper().Replace("-", "_")}_STATE_NAME }} from './{name}/{name}.state';");
        }

        code.AppendLine();

        code.AppendLine($"export const AUTOGENERATED_DATABASE_STATES = {{");

        for (int i = 0; i < Stores.Count; i++)
        {
            var store = Stores[i];

            if (!store.Actions.Items.Any(x => x.Type == ActionType.LoadAll)) continue;

            code.AppendLine($"  [{CodeGenerationUtilities.ToTypeScriptFileCase(store.Name).ToUpper().Replace("-", "_")}_STATE_NAME]: {{");
            code.AppendLine($"    state: {store.Name}State,");
            code.AppendLine($"    cacheTimeout: 999,");
            code.AppendLine($"    loadAction: {store.Name}Actions.LoadAll,");
            code.AppendLine($"    clearAction: {store.Name}Actions.Clear,");
            code.AppendLine($"  }},");

            if (i != Stores.Count - 1)
            {
                code.AppendLine($"");
            }
        }

        code.AppendLine($"}};");

        var path = Path.Combine(_basePath, "state", "database");

        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }

        File.WriteAllText(Path.Combine(path, "state-databases.setup.ts"), code.ToString());
    }
}
