// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rbkApiModules.Demo.Database;

namespace rbkApiModules.Demo.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("rbkApiModules.Authentication.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthenticationGroup")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("RefreshTokenValidity")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.Claim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationGroup")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "AuthenticationGroup")
                        .IsUnique();

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthenticationGroup")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "AuthenticationGroup")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.RoleToClaim", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClaimId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesToClaims");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.UserToClaim", b =>
                {
                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.HasKey("ClaimId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToClaims");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.UserToRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToRoles");
                });

            modelBuilder.Entity("rbkApiModules.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Editor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Editor");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Claims")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("SystemId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Claims")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("QueryDefinition");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinitionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("QueryDefinitionGroup");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinitionToGroup", b =>
                {
                    b.Property<Guid>("QueryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QueryId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("QueryDefinitionToGroup");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinitionToState", b =>
                {
                    b.Property<Guid>("QueryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QueryId", "StateId");

                    b.HasIndex("StateId");

                    b.ToTable("QueryDefinitionToState");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SystemId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.StateChangeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("StatusHistory")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("StateChangeEvents");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.StateGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("StateGroups");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.Transition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromStateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("bit");

                    b.Property<Guid>("ToStateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FromStateId");

                    b.HasIndex("ToStateId");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.BaseClient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SubscriptionHasExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("SubscriptionInCancelation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TrialKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("TrialKeyId")
                        .IsUnique()
                        .HasFilter("[TrialKeyId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseClient");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaypalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaypalSandboxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BillingToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacilitatorAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PlanId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.TrialKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TrialPeriod")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UsedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("TrialKeys");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.ClientUser", b =>
                {
                    b.HasBaseType("rbkApiModules.Authentication.BaseUser");

                    b.Property<string>("IsBlocked")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("Username", "AuthenticationGroup")
                        .IsUnique()
                        .HasFilter("[AuthenticationGroup] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ClientUser");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.ManagerUser", b =>
                {
                    b.HasBaseType("rbkApiModules.Authentication.BaseUser");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ManagerUser");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Client", b =>
                {
                    b.HasBaseType("rbkApiModules.Payment.SqlServer.BaseClient");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Name");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Manager", b =>
                {
                    b.HasBaseType("rbkApiModules.Payment.SqlServer.BaseClient");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("Name");

                    b.HasDiscriminator().HasValue("Manager");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.BaseUser", b =>
                {
                    b.OwnsOne("rbkApiModules.Authentication.PasswordRedefineCode", "PasswordRedefineCode", b1 =>
                        {
                            b1.Property<Guid>("BaseUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreationDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Hash")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BaseUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("BaseUserId");
                        });

                    b.Navigation("PasswordRedefineCode");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.RoleToClaim", b =>
                {
                    b.HasOne("rbkApiModules.Authentication.Claim", "Claim")
                        .WithMany("Roles")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Authentication.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.UserToClaim", b =>
                {
                    b.HasOne("rbkApiModules.Authentication.Claim", "Claim")
                        .WithMany("Users")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Authentication.BaseUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.UserToRole", b =>
                {
                    b.HasOne("rbkApiModules.Authentication.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Authentication.BaseUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rbkApiModules.Comments.Comment", b =>
                {
                    b.HasOne("rbkApiModules.Comments.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Editor", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.Blog", "Blog")
                        .WithMany("Editors")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Post", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.Document", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.State", "State")
                        .WithMany("Items")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinitionToGroup", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.QueryDefinitionGroup", "Group")
                        .WithMany("Queries")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.QueryDefinition", "Query")
                        .WithMany("Groups")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinitionToState", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.QueryDefinition", "Query")
                        .WithMany("FilteringStates")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Query");

                    b.Navigation("State");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.State", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.StateGroup", "Group")
                        .WithMany("States")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.StateChangeEvent", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.Document", "Entity")
                        .WithMany("Events")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.Transition", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.Event", "Event")
                        .WithMany("Transitions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.State", "FromState")
                        .WithMany("Transitions")
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Demo.Models.StateMachine.State", "ToState")
                        .WithMany("UsedBy")
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("FromState");

                    b.Navigation("ToState");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.BaseClient", b =>
                {
                    b.HasOne("rbkApiModules.Payment.SqlServer.Plan", "Plan")
                        .WithMany("Clients")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("rbkApiModules.Payment.SqlServer.TrialKey", "TrialKey")
                        .WithOne()
                        .HasForeignKey("rbkApiModules.Payment.SqlServer.BaseClient", "TrialKeyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Plan");

                    b.Navigation("TrialKey");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.Payment", b =>
                {
                    b.HasOne("rbkApiModules.Payment.SqlServer.Subscription", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.Subscription", b =>
                {
                    b.HasOne("rbkApiModules.Payment.SqlServer.BaseClient", "Client")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rbkApiModules.Payment.SqlServer.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.TrialKey", b =>
                {
                    b.HasOne("rbkApiModules.Payment.SqlServer.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Client", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.ClientUser", "User")
                        .WithOne("Client")
                        .HasForeignKey("rbkApiModules.Demo.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Manager", b =>
                {
                    b.HasOne("rbkApiModules.Demo.Models.ManagerUser", "User")
                        .WithOne("Manager")
                        .HasForeignKey("rbkApiModules.Demo.Models.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.BaseUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.Claim", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("rbkApiModules.Authentication.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("rbkApiModules.Comments.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.Blog", b =>
                {
                    b.Navigation("Editors");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.Document", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.Event", b =>
                {
                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinition", b =>
                {
                    b.Navigation("FilteringStates");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.QueryDefinitionGroup", b =>
                {
                    b.Navigation("Queries");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.State", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Transitions");

                    b.Navigation("UsedBy");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.StateMachine.StateGroup", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.BaseClient", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.Plan", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("rbkApiModules.Payment.SqlServer.Subscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.ClientUser", b =>
                {
                    b.Navigation("Client");
                });

            modelBuilder.Entity("rbkApiModules.Demo.Models.ManagerUser", b =>
                {
                    b.Navigation("Manager");
                });
#pragma warning restore 612, 618
        }
    }
}
