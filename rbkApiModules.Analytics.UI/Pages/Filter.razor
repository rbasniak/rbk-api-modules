@page "/analytics/filter"

@using System.Net.Http
@inject IAnalyticsDataService DataService

<h2 class="rbk-auditing-dashboard-red">Server Side Analytics</h2>

<RadzenCard Style="width:100%; margin-bottom: 2em;">

    <div style="display: flex; justify-content: space-between; gap: 1em;">
        <div style="flex: 1">
            <h3>Date from</h3>
            <RadzenDatePicker @bind-Value="dateFrom" DateFormat="d" Style="width: 100%" />
        </div>
        <div style="flex: 1">
            <h3>Date to</h3>
            <RadzenDatePicker @bind-Value="dateTo" DateFormat="d" Style="width: 100%" />
        </div>
        <div style="flex: 1">
            <h3>Application Versions</h3>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="selectedVersions" Multiple="true" Placeholder="Select..." Data="@versions" TextProperty="Name"
                            ValueProperty="Id" Style="width:100%;" />
        </div>
        <div style="flex: 1">
            <h3>Application Areas</h3>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="selectedAreas" Multiple="true" Placeholder="Select..." Data="@areas" TextProperty="Name"
                            ValueProperty="Id" Style="width:100%;" />
        </div>
    </div>

    <div style="display: flex; justify-content: space-between; gap: 1em;">
        <div style="flex: 1">
            <h3>Domains</h3>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="selectedDomains" Multiple="true" Placeholder="Select..." Data="@domains" TextProperty="Name"
                            ValueProperty="Id" Style="width:100%;" />
        </div>
        <div style="flex: 1">
            <h3>Endpoints</h3>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="selectedActions" Multiple="true" Placeholder="Select..." Data="@actions" TextProperty="Name"
                            ValueProperty="Id" Style="width:100%;" />
        </div>
        <div style="flex: 1">
            <h3>Responses</h3>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="selectedResponses" Multiple="true" Placeholder="Select..." Data="@responses" TextProperty="Name"
                            ValueProperty="Id" Style="width:100%;" />
        </div>
        <div style="flex: 1">
            <h3>Users</h3>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="selectedUsers" Multiple="true" Placeholder="Select..." Data="@users" TextProperty="Name"
                            ValueProperty="Id" Style="width:100%;" />
        </div>
    </div>

    <div style="display: flex; justify-content: space-between; gap: 1em;">
        <div style="flex: 2; width: calc(100% + 1em)">
            <h3>User Agents</h3>
            <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value="selectedAgents" Multiple="true" Placeholder="Select..." Data="@agents" TextProperty="Name"
                            ValueProperty="Id" Style="width:100%;" />
        </div>
        <div style="flex: 1">
            <h3>Duration</h3>
            <RadzenNumeric TValue="int" @bind-Value="@durationThreshold" Style="width:100%;" />
        </div>
        <div style="flex: 1">
            <h3>Contains Id</h3>
            <RadzenTextBox @bind-Value="containsId" Style="width: 100%" />
        </div>
    </div>
    <div style="display: flex; justify-content: flex-end; margin-top: 1em">
        <RadzenButton Text="Filter" ButtonStyle="ButtonStyle.Secondary" Style="width: 150px" Click="@(Click)" />
    </div>
</RadzenCard>

@if (results != null)
{
<div>
    <h4 style="margin-left: 1em;">@results.Length results found</h4>

    <RadzenDataList WrapItems="false" AllowPaging="true" Data="@results" PageSize="100" TItem="AnalyticsEntry">
        <Template Context="item">
                <div style="display: flex; flex-direction: row">
                    <div style="flex: 1; display: flex; align-items: center;">
                        @if (item.Response == 200)
                        {
                            <RadzenImage Path="_content/rbkApiModules.Analytics.UI/images/success.png" Style="width: 128px; height: 128px;" />
                        }
                        else if (item.Response == 400)
                        {
                            <RadzenImage Path="_content/rbkApiModules.Analytics.UI/images/warning.png" Style="width: 128px; height: 128px;" />
                        }
                        else if (item.Response == 500)
                        {
                            <RadzenImage Path="_content/rbkApiModules.Analytics.UI/images/error.png" Style="width: 128px; height: 128px;" />
                        }
                        else
                        {
                            <RadzenImage Path="_content/rbkApiModules.Analytics.UI/images/question.png" Style="width: 128px; height: 128px;" />
                        }
                    </div>
                    <div style="flex: 8">
                        <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: baseline; margin-bottom: 1em;">
                            <div style="flex: 3">
                                <div>Timestamp:</div>
                                <b>@item.Timestamp.ToString()</b>
                            </div>

                            <div style="flex: 3">
                                <div>Version:</div>
                                <b>@item.Version</b>
                            </div>

                            <div style="flex: 3">
                                <div>Area:</div>
                                <b>@item.Area</b>
                            </div>

                            <div style="flex: 3">
                                <div>Domain:</div>
                                <b>@item.Domain</b>
                            </div>
                        </div>

                        <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: baseline; margin-bottom: 1em;">
                            <div style="flex: 6">
                                <div>Endpoint:</div>
                                <b>@item.Action</b>
                                @if (item.Action != item.Path)
                                {
                                    <b>@item.Identity</b>
                                }
                            </div>

                            <div style="flex: 3">
                                <div>Response:</div>
                                <b>@item.Response</b>
                            </div>

                            <div style="flex: 3">
                                <div>Duration:</div>
                                <b>@item.Duration ms</b>
                            </div>
                        </div>

                        <div style="display: flex; flex-direction: row; justify-content: space-between; align-items: baseline;">
                            <div style="flex: 1">
                                <div>Identity:</div>
                                <b>@item.Identity</b>
                            </div>

                            <div style="flex: 2">
                                <div>Username:</div>
                                <b>@item.Username</b>
                            </div>

                            <div style="flex: 3">
                                <div>IP Address:</div>
                                <b>@item.IpAddress</b>
                            </div>

                            <div style="flex: 6">
                                <div>User Agent:</div>
                                <b>@item.UserAgent</b>
                            </div>
                        </div>
                    </div>
                </div>

        </Template>
    </RadzenDataList>
</div>
}

@code {
    AnalyticsEntry[] results;
    SimpleNamedEntity[] versions;
    SimpleNamedEntity[] areas;
    SimpleNamedEntity[] domains;
    SimpleNamedEntity[] agents;
    SimpleNamedEntity[] actions;
    SimpleNamedEntity[] responses;
    SimpleNamedEntity[] users;

    IEnumerable<string> selectedAreas = new string[] { };
    IEnumerable<string> selectedDomains = new string[] { };
    IEnumerable<string> selectedAgents = new string[] { };
    IEnumerable<string> selectedActions = new string[] { };
    IEnumerable<string> selectedResponses = new string[] { };
    IEnumerable<string> selectedUsers = new string[] { };
    IEnumerable<string> selectedVersions = new string[] { };

    DateTime dateFrom = DateTime.Now.AddDays(-7);
    DateTime dateTo = DateTime.Now;
    int durationThreshold = 0;
    string containsId;

    protected override async Task OnInitializedAsync()
    {
        if (DataService == null)
        {
            areas = new[] { new SimpleNamedEntity("0", "NULL") };
            domains = new[] { new SimpleNamedEntity("0", "NULL") };
            agents = new[] { new SimpleNamedEntity("0", "NULL") };
            actions = new[] { new SimpleNamedEntity("0", "NULL") };
            responses = new[] { new SimpleNamedEntity("0", "NULL") };
            users = new[] { new SimpleNamedEntity("0", "NULL") };
            versions = new[] { new SimpleNamedEntity("0", "NULL") };
        }

        var response = await DataService.GetFilterDataAsync();

        if (response.Success)
        {
            var data = response.Data;

            areas = data.Areas.Select(x => new SimpleNamedEntity(x, x)).ToArray();
            domains = data.Domains.Select(x => String.IsNullOrEmpty(x) ? new SimpleNamedEntity(x, "Without domain") : new SimpleNamedEntity(x, x)).ToArray();
            agents = data.Agents.Select(x => new SimpleNamedEntity(x, x)).ToArray();
            actions = data.Actions.Select(x => new SimpleNamedEntity(x, x)).ToArray();
            responses = data.Responses.Select(x => new SimpleNamedEntity(x, x)).ToArray();
            users = data.Users.Select(x => String.IsNullOrEmpty(x) ? new SimpleNamedEntity(x, "Anonymous") : new SimpleNamedEntity(x, x)).ToArray();
            versions = data.Versions.Select(x => new SimpleNamedEntity(x, x)).ToArray();

            selectedActions = actions.Select(x => x.Id);
            selectedAgents = agents.Select(x => x.Id);
            selectedAreas = areas.Select(x => x.Id);
            selectedDomains = domains.Select(x => x.Id);
            selectedResponses = responses.Select(x => x.Id);
            selectedUsers = users.Select(x => x.Id);
            selectedVersions = versions.Select(x => x.Id);
        }
        else
        {
            areas = new[] { new SimpleNamedEntity("0", "ERROR") };
            domains = new[] { new SimpleNamedEntity("0", "ERROR") };
            agents = new[] { new SimpleNamedEntity("0", "ERROR") };
            actions = new[] { new SimpleNamedEntity("0", "ERROR") };
            responses = new[] { new SimpleNamedEntity("0", "ERROR") };
            users = new[] { new SimpleNamedEntity("0", "ERROR") };
            versions = new[] { new SimpleNamedEntity("0", "ERROR") };
        }
    }

    protected override void OnInitialized()
    {
    }

    async void Click(MouseEventArgs args)
    {
        var data = new FilterAnalyticsEntries.Command();
        data.Actions = selectedActions.ToArray();
        data.Agents = selectedAgents.ToArray();
        data.Areas = selectedAreas.ToArray();
        data.DateFrom = dateFrom;
        data.DateTo = dateTo;
        data.Domains = selectedDomains.ToArray();
        data.Duration = durationThreshold;
        data.EntityId = containsId;
        data.Responses = selectedResponses.ToArray();
        data.Users = selectedUsers.ToArray();
        data.Versions = selectedVersions.ToArray();

        results = (await DataService.FilterAsync(data)).Data;

        // Note that the following line is necessary because otherwise Blazor would not recognize the state change and not refresh the UI
        StateHasChanged();
    }
}
