// <auto-generated />
using System;
using Demo2.Domain.Events.MyImplementation.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demo2.Database.Relational
{
    [DbContext(typeof(RelationalContext))]
    [Migration("20230316140859_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Demo2.Domain.Events.Domain.DomainEventDataObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Demo2.Relational.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangeRequestId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeRequestId");

                    b.HasIndex("ChangeRequestId1");

                    b.HasIndex("TypeId");

                    b.ToTable("Attachments", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.AttachmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttachmentTypes", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("text");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<double>("Complexity")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentOwner")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DesiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("InternalNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("InternalNumber"));

                    b.Property<string>("Justification")
                        .HasColumnType("text");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("text");

                    b.Property<string>("Resource")
                        .HasColumnType("text");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<string>("SourceNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusSgm")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StateId");

                    b.HasIndex("TypeId");

                    b.ToTable("ChangeRequests", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequestPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChangeRequestPriorities", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequestSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChageRequestSources", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequestToDiscipline", b =>
                {
                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChangeRequestId1")
                        .HasColumnType("uuid");

                    b.HasKey("ChangeRequestId", "DisciplineId");

                    b.HasIndex("ChangeRequestId1");

                    b.HasIndex("DisciplineId");

                    b.ToTable("ChangeRequestToDisciplines", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequestType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ChangeRequestTypes", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Disciplines", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SindotecUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChangeRequestId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.DocumentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentCategories", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.EvidenceAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AdditionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentary")
                        .HasColumnType("text");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChangeRequestId");

                    b.HasIndex("TypeId");

                    b.ToTable("EvidenceAttachments", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.Fic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChangeRequestId");

                    b.ToTable("Fic");
                });

            modelBuilder.Entity("Demo2.Relational.FicCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FicCategories", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UnId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnId");

                    b.ToTable("Platforms", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.StateChangeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChangeRequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewOwner")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("StatusHistory")
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChangeRequestId");

                    b.ToTable("StateChangeEvent");
                });

            modelBuilder.Entity("Demo2.Relational.Un", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Repository")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Uns", (string)null);
                });

            modelBuilder.Entity("rbkApiModules.Commons.Relational.SeedHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateApplied")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("__SeedHistory", (string)null);
                });

            modelBuilder.Entity("Demo2.Relational.Attachment", b =>
                {
                    b.HasOne("Demo2.Relational.ChangeRequest", "ChangeRequest")
                        .WithMany()
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.ChangeRequest", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ChangeRequestId1");

                    b.HasOne("Demo2.Relational.AttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeRequest");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequest", b =>
                {
                    b.HasOne("Demo2.Relational.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.ChangeRequestPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.ChangeRequestSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.ChangeRequestType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Demo2.Relational.GutMatrix", "Prioritization", b1 =>
                        {
                            b1.Property<Guid>("ChangeRequestId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Gravity")
                                .HasColumnType("integer");

                            b1.Property<int>("Tendency")
                                .HasColumnType("integer");

                            b1.Property<int>("Urgency")
                                .HasColumnType("integer");

                            b1.HasKey("ChangeRequestId");

                            b1.ToTable("ChangeRequests");

                            b1.WithOwner()
                                .HasForeignKey("ChangeRequestId");
                        });

                    b.Navigation("Platform");

                    b.Navigation("Prioritization");

                    b.Navigation("Priority");

                    b.Navigation("Source");

                    b.Navigation("State");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequestToDiscipline", b =>
                {
                    b.HasOne("Demo2.Relational.ChangeRequest", "ChangeRequest")
                        .WithMany()
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.ChangeRequest", null)
                        .WithMany("Disciplines")
                        .HasForeignKey("ChangeRequestId1");

                    b.HasOne("Demo2.Relational.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeRequest");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Demo2.Relational.Document", b =>
                {
                    b.HasOne("Demo2.Relational.DocumentCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.ChangeRequest", "ChangeRequest")
                        .WithMany("Documents")
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ChangeRequest");
                });

            modelBuilder.Entity("Demo2.Relational.EvidenceAttachment", b =>
                {
                    b.HasOne("Demo2.Relational.ChangeRequest", "ChangeRequest")
                        .WithMany("EvidenceAttachments")
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.AttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeRequest");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Demo2.Relational.Fic", b =>
                {
                    b.HasOne("Demo2.Relational.FicCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo2.Relational.ChangeRequest", "ChangeRequest")
                        .WithMany("Fics")
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ChangeRequest");
                });

            modelBuilder.Entity("Demo2.Relational.Platform", b =>
                {
                    b.HasOne("Demo2.Relational.Un", "Un")
                        .WithMany()
                        .HasForeignKey("UnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Un");
                });

            modelBuilder.Entity("Demo2.Relational.StateChangeEvent", b =>
                {
                    b.HasOne("Demo2.Relational.ChangeRequest", "ChangeRequest")
                        .WithMany("Events")
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeRequest");
                });

            modelBuilder.Entity("Demo2.Relational.ChangeRequest", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Disciplines");

                    b.Navigation("Documents");

                    b.Navigation("Events");

                    b.Navigation("EvidenceAttachments");

                    b.Navigation("Fics");
                });
#pragma warning restore 612, 618
        }
    }
}
